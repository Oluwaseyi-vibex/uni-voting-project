// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  name              String
  email             String     @unique
  matricNumber      String     @unique
  password          String
  verified          Boolean    @default(false)
  verificationToken String?
  lastLoginIp       String?
  lastLoginAt       DateTime?
  role              Role       @default(STUDENT) // ðŸ‘ˆ enum instead of plain string
  votes             Vote[]
  auditLogs         AuditLog[]
}

enum Role {
  SUPER_ADMIN
  ADMIN
  OBSERVER
  STUDENT
}

model IPLog {
  id        Int      @id @default(autoincrement())
  ipAddress String
  action    String // e.g. "register", "login", "failed_login"
  email     String?
  timestamp DateTime @default(now())
}

model Election {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  candidates  Candidate[]
  votes       Vote[] // ðŸ‘ˆ Add this line
}

model Candidate {
  id         Int      @id @default(autoincrement())
  name       String
  party      String
  position   String
  votesCount Int      @default(0)
  election   Election @relation(fields: [electionId], references: [id])
  electionId Int
  votes      Vote[]
}

model Vote {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  election    Election  @relation(fields: [electionId], references: [id])
  electionId  Int
  position    String
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     String? // optional, in case action is system-generated
  action     String // e.g. CREATE_ELECTION, UPDATE_USER, CAST_VOTE
  entityType String? // e.g. "Election", "User", "Candidate"
  entityId   String? // store ID of affected entity as string for flexibility
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}
